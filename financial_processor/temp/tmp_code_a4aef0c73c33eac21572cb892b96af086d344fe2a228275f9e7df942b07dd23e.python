import re
import json

def parse_statement():
    with open('statement.txt', encoding='utf-8') as f:
        statement = f.read()

    # Normalize lines for easier handling
    lines = [line.strip() for line in statement.split('\n') if line.strip()]

    # Helper regex
    date_pat = r'((?:0?[1-9]|1[0-2])/([0-2]?[0-9]|3[01]))'  # MM/DD or M/D
    amt_pat = r'([-]?\$?\(?\d[\d,]*\.?\d*\)?)'  # Amounts ($1,234.56 or -123.45 or (123.12))
    cardholder_section_re = re.compile(r'([A-Z][A-Z \-,\.]+)(?:\s*\(Card ending in \d{4}\))?', re.I)

    # 1. Parse Account Summary block
    summary_block = []
    in_sum = False
    for line in lines:
        if not in_sum and re.search(r'ACCOUNT\s+SUMMARY', line, re.I):
            in_sum = True
            continue
        if in_sum:
            if (re.match(r'[A-Z ]{4,}', line) and 'summary' not in line.lower()) or re.match(r'^[-=]{5,}$', line):
                break  # likely next major heading or divider
            summary_block.append(line)

    # Mapping for summary fields
    summary_key_map = {
        'bank_name': lambda v: v,
        'previous_balance': ['Previous Balance'],
        'payments': ['Payments'],
        'credits': ['Other Credits', 'Credits'],
        'purchases': ['Purchases'],
        'cash_advances': ['Cash Advances'],
        'fees': ['Fees Charged', 'Fees'],
        'interest': ['Interest Charged', 'Interest'],
        'new_balance': ['New Balance', 'Total New Balance'],
        'rewards_balance': ['Rewards Balance', 'Reward Balance', 'Rewards'],
        'available_credit_limit': ['Available Credit Limit'],
        'total_transactions': ['Total Transactions'],
        'total_amount': ['Total Amount'],
    }
    summary = {k: None for k in summary_key_map}
    bank_name_found = False

    for line in summary_block:
        orig_line = line
        # Extract bank name from first non-empty summary line if not yet found
        if not bank_name_found and not any(lab in line for v in summary_key_map.values() if isinstance(v, list) for lab in v):
            summary['bank_name'] = line
            bank_name_found = True
            continue
        # Try each key mapping pattern
        for key, variants in summary_key_map.items():
            if key == 'bank_name':
                continue
            for var in variants:
                if var.lower() in line.lower():
                    # look for amount in the line
                    m = re.search(amt_pat, line.replace(',', '').replace('$', ''), re.S)
                    if m:
                        val = m.group(1)
                    else:
                        # Try splitting at end and getting last number
                        parts = re.split(r'\s{2,}', line)
                        val = next((p for p in reversed(parts) if re.match(r'[-]?\(?[\d,\.]+\)?', p)), None)
                    if val:
                        v = val.strip().replace('$', '').replace(',', '')
                        negative = False
                        if '(' in v and ')' in v:
                            negative = True
                            v = v.strip('()')
                        try:
                            vnum = float(v.replace(',', '').replace('$', '').replace('âˆ’', '-'))
                            if negative:
                                vnum = -abs(vnum)
                            summary[key] = vnum
                        except Exception:
                            summary[key] = v
                    break

    # 2. Parse cardholder sections
    # We'll build a mapping: cardholder_name -> [ transactions ]
    transactions_by_cardholder = {}

    # Find all cardholder names and their section line indexes
    cardholder_idxs = []
    for idx, line in enumerate(lines):
        # Find "CARDHOLDER SUMMARY" or "Card ending in ####" or similar
        m = re.match(r'([A-Z][A-Z \-,\.]+)\s*\(Card ending in \d{4}\)', line)
        if m:
            cardholder_name = m.group(1).strip().title()
            cardholder_idxs.append((cardholder_name, idx))
            continue
        # Some statements may have "CARDHOLDER SUMMARY: NAME" or "Cardholder: NAME"
        m2 = re.match(r'CARDHOLDER(?: SUMMARY)?:?\s*([A-Za-z ,.\'-]+)', line, re.I)
        if m2:
            cardholder_name = m2.group(1).strip().title()
            cardholder_idxs.append((cardholder_name, idx))
            continue
        # Defensive: catch "NAME (Card xxxxx)", "Transactions for John Smith"
        m3 = re.match(r'([A-Z][A-Z \-,\.]+)\s*\(Card \w+ \d{4,}\)', line)
        if m3:
            cardholder_name = m3.group(1).strip().title()
            cardholder_idxs.append((cardholder_name, idx))
            continue

    if not cardholder_idxs:
        # As fallback: look for blocks like "TRANSACTIONS FOR [NAME]"
        for idx, line in enumerate(lines):
            m = re.match(r'TRANSACTIONS FOR ([A-Z][A-Z ,.\'-]+)', line, re.I)
            if m:
                cardholder_name = m.group(1).strip().title()
                cardholder_idxs.append((cardholder_name, idx))

    # Prepare the "end positions" for each cardholder section
    cardholder_idxs_sorted = sorted(cardholder_idxs, key=lambda tup: tup[1])
    cardholder_sections = []
    for i, (name, idx) in enumerate(cardholder_idxs_sorted):
        stop = cardholder_idxs_sorted[i+1][1] if i+1 < len(cardholder_idxs_sorted) else len(lines)
        cardholder_sections.append((name, idx, stop))

    # For each cardholder section, extract transactions with date, post date, description, amount
    for name, si, ei in cardholder_sections:
        # Defensive: skip sections with same name as a heading or not likely a person
        if name.lower() in ('transactions', 'cardholder', 'summary'):
            continue
        transactions = []
        for lnum in range(si, ei):
            line = lines[lnum]
            # Transaction lines: sale_date, post_date, description, amount (can have extra withdrawn/debit or credit/payments flag)
            # Example line: 04/11  04/13  AMAZON.COM*MARKETPLACE  -42.23
            trans_match = re.match(r'^'+date_pat+r'\s+'+date_pat+r'\s+(.+?)\s+'+amt_pat+r'$', line)
            if trans_match:
                sale_date = trans_match.group(1)
                post_date = trans_match.group(3)
                desc = trans_match.group(5).strip()
                amt_raw = trans_match.group(6).strip()
                amt_sval = amt_raw.replace('$', '').replace(',', '')
                negative = False
                # Negative if parentheses or minus
                if '(' in amt_sval and ')' in amt_sval:
                    negative = True
                    amt_sval = amt_sval.replace('(', '').replace(')', '')
                if amt_sval.startswith('-'):
                    negative = True
                    amt_sval = amt_sval.replace('-', '')
                try:
                    amount = float(amt_sval)
                    if negative:
                        amount = -abs(amount)
                    else:
                        amount = abs(amount)
                except Exception:
                    continue  # skip broken line
                tr = {
                    "sale_date": sale_date,
                    "post_date": post_date,
                    "description": desc,
                    "amount": abs(amount)
                }
                transactions.append(tr)
                continue
            # Some statements omit post_date (just one date)
            trans_match2 = re.match(r'^'+date_pat+r'\s+(.+?)\s+'+amt_pat+r'$', line)
            if trans_match2:
                sale_date = trans_match2.group(1)
                post_date = sale_date
                desc = trans_match2.group(3).strip()
                amt_raw = trans_match2.group(4).strip()
                amt_sval = amt_raw.replace('$', '').replace(',', '')
                negative = False
                if '(' in amt_sval and ')' in amt_sval:
                    negative = True
                    amt_sval = amt_sval.replace('(', '').replace(')', '')
                if amt_sval.startswith('-'):
                    negative = True
                    amt_sval = amt_sval.replace('-', '')
                try:
                    amount = float(amt_sval)
                    if negative:
                        amount = -abs(amount)
                    else:
                        amount = abs(amount)
                except Exception:
                    continue  # skip line
                tr = {
                    "sale_date": sale_date,
                    "post_date": post_date,
                    "description": desc,
                    "amount": abs(amount)
                }
                transactions.append(tr)
                continue
        # Only add if at least one transaction found
        if transactions:
            transactions_by_cardholder[name] = transactions

    # Defensive: If only one cardholder found and it's plausible, try to sweep up any transaction section (may see "TRANSACTIONS")
    if not transactions_by_cardholder:
        # Search for any possible transaction table: look for lines matching date pattern at start
        txns = []
        for line in lines:
            if re.match(r'^'+date_pat+r'\s+'+date_pat+r'\s+.+\s+'+amt_pat+r'$', line):
                trans_match = re.match(r'^'+date_pat+r'\s+'+date_pat+r'\s+(.+?)\s+'+amt_pat+r'$', line)
                sale_date = trans_match.group(1)
                post_date = trans_match.group(3)
                desc = trans_match.group(5).strip()
                amt_raw = trans_match.group(6).strip()
                amt_sval = amt_raw.replace('$', '').replace(',', '')
                negative = False
                if '(' in amt_sval and ')' in amt_sval:
                    negative = True
                    amt_sval = amt_sval.replace('(', '').replace(')', '')
                if amt_sval.startswith('-'):
                    negative = True
                    amt_sval = amt_sval.replace('-', '')
                try:
                    amount = float(amt_sval)
                    if negative:
                        amount = -abs(amount)
                    else:
                        amount = abs(amount)
                except Exception:
                    continue  # skip broken line
                tr = {
                    "sale_date": sale_date,
                    "post_date": post_date,
                    "description": desc,
                    "amount": abs(amount)
                }
                txns.append(tr)
        if txns:
            transactions_by_cardholder['Primary'] = txns

    parsed = {
        "transactions_by_cardholder": transactions_by_cardholder,
        "summary": summary
    }
    print(json.dumps(parsed, ensure_ascii=False))

parse_statement()
