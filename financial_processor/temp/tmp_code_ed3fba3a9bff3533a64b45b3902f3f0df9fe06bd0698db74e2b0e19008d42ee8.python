import json
import re

with open('statement.txt', encoding='utf-8') as f:
    text = f.read()

# Parse Account Summary
summary_fields = {
    'Bank Name': 'bank_name',
    'Previous Balance': 'previous_balance',
    'Payments': 'payments',
    'Credits': 'credits',
    'Purchases': 'purchases',
    'Cash Advances': 'cash_advances',
    'Fees': 'fees',
    'Interest': 'interest',
    'New Balance': 'new_balance',
    'Rewards Balance': 'rewards_balance',
    'Available Credit Limit': 'available_credit_limit',
    'Total Transactions': 'total_transactions',
    # Sometimes statements use slightly different line labels
    'Payment': 'payments',
    'Credit': 'credits',
    'Purchase': 'purchases',
    'Cash Advance': 'cash_advances',
    'Fee': 'fees',
    'Interest Charge': 'interest'
}
summary = {}
bank_name = None
account_summary = None

# 1. Find bank name (top of file, before summary).
lines = text.splitlines()
for i, line in enumerate(lines):
    if 'Account Summary' in line:
        if i > 0 and lines[i-1].strip() and not lines[i-1].strip().isdigit():
            bank_name = lines[i-1].strip()
        break
if bank_name is None:
    # fallback: first non-empty, non-numeric line up top
    for line in lines[:10]:
        if line.strip() and not line.strip().isdigit():
            bank_name = line.strip()
            break

# 2. Locate “Account Summary” section
summary_regex = re.compile(r'Account Summary', re.I)
summary_start = None
for m in summary_regex.finditer(text):
    summary_start = m.end()
    break  # pick first only

summary_lines = []
if summary_start is not None:
    post_text = text[summary_start:]
    for line in post_text.splitlines():
        if line.strip() == '':
            continue
        if re.search(r'(Detail|Transactions?|CARDHOLDER|Payment|Statement Date|Due Date|Cardholder Summary|Transactions for|Payments and Credits)', line, re.I):
            break
        summary_lines.append(line)

# 3. Parse summary lines
def parse_amount(s):
    s = s.replace(',', '')
    m = re.search(r'(-|\()?\$?([0-9]+\.[0-9]{2})\)?', s)
    if not m:
        return None
    val = float(m.group(2))
    if m.group(1) == '-' or '(' in s:
        val = -val
    return val

for line in summary_lines:
    # Try label : value
    if ':' in line:
        k,v = line.split(':',1)
        k = k.strip()
        v = v.strip()
    else:
        m = re.match(r'^(.*?)(\$\s*[\d,]+\.\d{2}|\([\d,]+\.\d{2}\))$', line.strip())
        if not m:
            # Try numeric only (for bank_name)
            continue
        k,v = m.group(1).strip(), m.group(2).strip()
    lowerk = k.strip().lower()
    for canon_label, target in summary_fields.items():
        if canon_label.lower() in lowerk and target not in summary:
            if 'transactions' in target:
                # Might be not currency but int
                num_m = re.search(r'(\d+)', v.replace(',',''))
                if num_m:
                    summary[target] = int(num_m.group(1))
                else:
                    summary[target] = 0
            else:
                amount = parse_amount(v)
                summary[target] = amount if amount is not None else v
            break

if 'bank_name' not in summary:
    summary['bank_name'] = bank_name or ""

# Clean up
for k in [
    'previous_balance','payments','credits','purchases','cash_advances',
    'fees','interest','new_balance','rewards_balance','available_credit_limit'
]:
    if k not in summary:
        summary[k] = 0.0 if k!='rewards_balance' else 0

if 'total_transactions' not in summary:
    summary['total_transactions'] = 0

# 4. Parse transactions by cardholder
# Find cardholder blocks:
# Heuristic: look for "CARDHOLDER SUMMARY", "Transactions for [name]" or lines preceding "Card ending in" or "[NAME] (Card ending in ####)"
cardholder_blocks = []
cardholder_names = []
pat_cardholder = re.compile(r'(?:Transactions for|CARDHOLDER SUMMARY|Statement Summary for)\s+([A-Z \',\-\.]+)(?:\s*\(Card ending in \d{4,}\))?', re.I)
lineidxs = list(range(len(lines)))
i = 0
while i < len(lines):
    line = lines[i]
    lineu = line.strip().upper()
    # CARDHOLDER block
    m = pat_cardholder.search(line)
    if m:
        name = m.group(1).strip().title()
        cardholder_names.append((i,name))
        i += 1
        continue
    # Or: a name preceding "Card ending in ####"
    n = None
    if re.match(r'Card ending in \d{4,}', line.strip(), re.I) and i>0:
        poss_name = lines[i-1].strip().title()
        if poss_name and ('summary' not in poss_name.lower()) and poss_name.isalpha() or (" " in poss_name and all(part.isalpha() for part in poss_name.split())):
            n = poss_name
    if n and (n not in [name for _,name in cardholder_names]):
        cardholder_names.append((i-1, n))
    i += 1

# Deduplicate names, get block starts
seen_names = set()
cardholder_blocks = []
for idx,name in cardholder_names:
    if name not in seen_names:
        seen_names.add(name)
        cardholder_blocks.append((idx, name))

# Add ending for last
cardholder_blocks = sorted(cardholder_blocks, key=lambda x: x[0])
if cardholder_blocks:
    block_limits = []
    for i, (start, nm) in enumerate(cardholder_blocks):
        end = cardholder_blocks[i+1][0] if i+1<len(cardholder_blocks) else len(lines)
        block_limits.append( (start, end, nm) )
else:
    # Fallback: whole doc, one cardholder
    block_limits = [(0,len(lines),'Primary')]

transactions_by_cardholder = {}

tran_date_pat = re.compile(r'(\d{1,2}/\d{1,2})\s+(\d{1,2}/\d{1,2})\s+(.+?)(?:\s{2,}|\t+)(-?\(?\$?\d[\d,]*\.\d{2}\)?)')
for start, end, name in block_limits:
    tlist = []
    for i in range(start, end):
        l = lines[i]
        # Find transaction lines: those beginning with two dates and ending with amount
        m = tran_date_pat.search(l)
        if m:
            sale_date = m.group(1)
            post_date = m.group(2)
            desc = m.group(3).strip()
            amt_str = m.group(4).replace(',','')
            # Detect negative
            if amt_str.startswith('(') and amt_str.endswith(')'):
                amt = -float(re.sub(r'[^\d.]','', amt_str))
            else:
                amt = float(re.sub(r'[^0-9.\-]','', amt_str))
            amt = abs(amt)  # Always store as positive as per instruction
            tlist.append({
                'sale_date': sale_date,
                'post_date': post_date,
                'description': desc,
                'amount': amt,
            })
        else:
            # Some statements split description or wrap, but only match lines with dates!
            continue
    transactions_by_cardholder[name] = tlist

parsed = {
    "transactions_by_cardholder": transactions_by_cardholder,
    "summary": summary
}

print(json.dumps(parsed, ensure_ascii=False))
